#-------------------------------------------------------------------------------
# Environment
#-------------------------------------------------------------------------------

World(
  physics = "ode"
)

Scene(
  name  = "Smallville",
  model = "smallville"
)

#-------------------------------------------------------------------------------
# Lighting
#-------------------------------------------------------------------------------

Light(
  type = "AmbientLight",
  name = "Ambient"
)

Light(
  type     = "PointLight",
  name     = "Sun",
  position = [10, 20, 30]
)

#-------------------------------------------------------------------------------
# World Objects
#-------------------------------------------------------------------------------

car = Actor(
  name        = "Car",
  model       = "alfa_romeo_147",
  position    = [10, 0, 0.3],
)

platform = Platform(
  name        = "Platform",
  model       = "smartter",
  position    = [1, 0, 0.3]
)

#-------------------------------------------------------------------------------
# Sensors
#-------------------------------------------------------------------------------

laser = Sensor(
  name         = "Laser",
  model        = "ibeo_alasca_xt",
  parent       = platform,
  position     = [2.3, 0, 0.12]
)

imu = Sensor(
  name         = "IMU",
  model        = "xsens_mti",
  parent       = platform,
  position     = [0.3, 0, 1.33],
  orientation  = [45.0, 40.0, 20.0] # yaw, pitch, roll
)

#-------------------------------------------------------------------------------
# Views
#-------------------------------------------------------------------------------

View(
  name       = "LaserView",
  type       = "LaserView",
  sensor     = laser,
  showPoints = True
)

#-------------------------------------------------------------------------------
# Control
#-------------------------------------------------------------------------------

Controller(
  name     = "CarController",
  model    = "path",
  path     = "smallville/alfa_romeo_147.pth",
  actor    = car,
  position = [0, 0, 0.3],
  velocity = 5
)

Controller(
  name     = "PlatformController",
  model    = "keyboard",
  platform = platform
)

#-------------------------------------------------------------------------------
# Camera
#-------------------------------------------------------------------------------

Camera(
  position = [-10, 0, 5],
  object   = platform,
  rotate   = False
)
#-------------------------------------------------------------------------------
# Output
#-------------------------------------------------------------------------------

from datetime import *

outputTime = datetime.now()
outputFile = open(outputTime.strftime("jerome_%Y-%m-%d-%H:%M:%S.log"), "w")
outputFile.write("# Log created by %s\n" %
  framework.configuration.fullName)
outputFile.write("# Date and time: %s\n" %
  outputTime.strftime("%B %d, %Y - %H:%M:%S"))
outputFile.write("# Vehicle parameters [m]: "+
  "L = %.9f, e_F = %.9f, e_R = %.9f, r_FL = %.9f, r_FR = %.9f, r_RL = %.9f, r_RR = %.9f\n" %
  (platform.actuator.steeringAxisDistance,
  platform.actuator.getWheelDistance(0, 1),
  platform.actuator.getWheelDistance(2, 3),
  platform.actuator.wheelRadius[0], platform.actuator.wheelRadius[1],
  platform.actuator.wheelRadius[2], platform.actuator.wheelRadius[3]))
t_io = platform.actuator.getPosition(imu)
r_io = platform.actuator.getOrientation(imu)
outputFile.write("# Odometry frame (relative to IMU frame) [m]/[deg]: "+
  "t_x = %.9f, t_y = %.9f, t_z = %.9f, r_x = %.9f, r_y = %.9f, r_z = %.9f\n" %
  (t_io[0], t_io[1], t_io[2], r_io[1], r_io[2], r_io[0]))
outputFile.write("# Format: time [s], x [m], y [m], z [m], "+
  "r_x [deg], r_y [deg], r_z [deg], v_x [m/s], v_y [m/s], v_z [m/s], "+
  "w_x [deg/s], w_y [deg/s], w_z [deg/s], w_FL [deg/s], w_FR [deg/s], "+
  "w_RL [deg/s], w_RR [deg/s], phi [deg]\n")

def output(time):
  v_iw_b = imu.solid.body.body.getLinearVel()
  w_iw_b = imu.solid.body.body.getAngularVel() * 180 / pi

  t_wi_b = imu.solid.body.body.getPosition()

  line = "%.6f " % framework.scheduler.getTime()+ \
    "%.9f %.9f %.9f %.9f %.9f %.9f " % \
    (imu.globalPosition[0], imu.globalPosition[1], imu.globalPosition[2],
    imu.globalOrientation[1], imu.globalOrientation[2],
    imu.globalOrientation[0])+ \
    "%.9f %.9f %.9f %.9f %.9f %.9f " % \
    (v_iw_b[0], v_iw_b[1], v_iw_b[2], w_iw_b[0], w_iw_b[1], w_iw_b[2])+ \
    "%.9f %.9f %.9f %.9f %.9f" % \
    (platform.actuator.turningRates[0], platform.actuator.turningRates[1],
    platform.actuator.turningRates[2], platform.actuator.turningRates[3],
    platform.actuator.state[1])+ \
    " %.9f %.9f %.9f" % \
    (t_wi_b[0], t_wi_b[1], t_wi_b[2])

  print line
  outputFile.write(line+"\n")

  return True

framework.scheduler.addTask("Output", output)
